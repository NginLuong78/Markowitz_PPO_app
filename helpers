# ===============================================
# helpers_vn30.py
# Utility functions and helper modules for VN30 Portfolio Optimization
# ===============================================

import os, math, json, time, warnings, logging
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize
import streamlit as st

# ---------------------------
# 1️⃣ Technical Indicators
# ---------------------------
def compute_rsi(series, period=14): ...
def compute_bollinger_bands(series, window=20, num_std=2): ...
def compute_atr(high, low, close, period=14): ...
def compute_obv(close, volume): ...
def compute_volume_oscillator(volume, short=5, long=20): ...
def compute_macd(series, short=12, long=26, signal=9): ...
def add_indicators_per_stock(df): ...
def compute_vn30_index_with_indicators(df): ...

# ---------------------------
# 2️⃣ Financial Metrics & Markowitz Optimization
# ---------------------------
def calculate_annualized_returns(df, annualize=True): ...
def calculate_cov_matrix(df, annualize=True): ...
def optimize_markowitz(mean_returns, cov_matrix,
                       top_n=10, method='sharpe',
                       lambda_l2=0.0, max_weight=1.0): ...

# ---------------------------
# 3️⃣ Plotting Helpers for Streamlit Dashboard
# ---------------------------
def plot_vn30_index_indicators(df, chart_option): ...
def plot_risk_contributions(selected_ids, selected_weights, cov_matrix, mean_returns): ...
def plot_efficient_frontier(mean_returns, cov_matrix, selected_ids, selected_weights): ...

# ---------------------------
# 4️⃣ Trading Strategies (Momentum, Mean Reversion, etc.)
# ---------------------------
class TradingStrategy: ...
class MomentumStrategy(TradingStrategy): ...
class MeanReversionStrategy(TradingStrategy): ...

# ---------------------------
# 5️⃣ Gym Environment for VN30 Reinforcement Learning
# ---------------------------
import gymnasium as gym
from gymnasium import spaces

class VN30TradingEnv(gym.Env):
    """
    Custom VN30 Trading Environment supporting multiple strategies,
    Markowitz weighting, and PPO agent interaction.
    """
    def __init__(self, df, tickers, strategy_dict, window_size=10, ...): ...
    def reset(self): ...
    def step(self, action): ...
    def render(self, mode='human'): ...
